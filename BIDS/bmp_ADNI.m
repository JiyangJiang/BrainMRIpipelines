function varargout = bmp_ADNI (operation_mode, varargin)
%
% DESCRIPTION
% ====================================================================================
%
%   bmp_ADNI contains a few shortcuts for ADNI cohort, including creating or retrieving
%   exisitng DICOM-to-BIDS mappings, running dcm2niix on previously prepared commands,
%   and diagnosing/check any missing by comparing study data with actual DICOM folder.
%
%   Note that since ADNI dataset has multiple sessions (i.e., timepoints) and subject
%   ID and scan date need to be used to identify session label, we specify ADNI
%   DICOM-to-BIDS mappings in individual-level.
%
%
% EVIDENCE TO CREATE MAPPINGS
% ====================================================================================
%
%   ASL
%
%     For ADNI ASL data, we considered 5 CSV files of study data downloaded from 
%     https://ida.loni.usc.edu/pages/access/studyData.jsp?project=ADNI
%
%       - MRILIST.csv
%       - UCSFASLQC.csv
%       - UCSFASLFS_11_02_15_V2.csv
%       - UCSFASLFSCBF_08_17_22.csv
%       - ADNIMERGE.csv
%
%     Refer to /path/to/BrainMRIpipelines/BIDS/ADNI/bmp_procADNIstudyData.m.
%
%
% ARGUMENTS
% ====================================================================================
%
%   bmp_ADNI can be ran in the following modes:
%
%
%     'initiate' mode
%     +++++++++++++++++++++++++++++++++
%
%       Call bmp_procADNIstudyData.m to process ADNI study data, and generate
%       /path/to/BrainMRIpipelines/ADNI/bmp_ADNI.mat. The MAT file saves
%       MRI_master, DEM_master, forDICOM2BIDS, and forBIDSpptsTsv.
%
%     'create' or 'create_mapping' mode 
%     +++++++++++++++++++++++++++++++++
%       
%        This mode is used to generate DICOM-to-BIDS mappings, and save the mappings 
%        in a .mat file. In this mode, pass 'create' to the argument 'operation_mode',
%        and /path/to/save/XXX.mat to varargin{1}. If varargin{1} is not specified, 
%        default value /path/to/BrainMRIpipelines/BIDS/bmp_ADNI_DICOM2BIDS.mat will be used.
%
%
%     'retrieve' or 'retrieve_mapping' mode
%     +++++++++++++++++++++++++++++++++++++
%
%        This mode load the previously created .mat file to retrieve the predefiend 
%        mappings. In this mode, pass 'retrieve' to the argument 'operation_mode', 
%        and /path/to/retrieve/XXX.mat to varargin{1}. If varargin{1} is not 
%        specified, default value /path/to/BrainMRIpipelines/BIDS/bmp_ADNI_DICOM2BIDS.mat 
%        will be used.
%
%
%     'dcm2niix' or 'run_dcm2niix' mode
%     +++++++++++++++++++++++++++++++++
%
%        This mode load bmp_ADNI_dcm2niixcmd.mat file generated by bmp_BIDSgenerator
%        to run dcm2niix for conversion. varargin{1} is /path/to/bmp_ADNI_dcm2niix.mat.
%        Default is /path/to/BrainMRIpipelines/BIDS/bmp_ADNI_dcm2niix.mat.
%
%
%     'refresh' or 'refresh_mat_files' mode
%     +++++++++++++++++++++++++++++++++++++
%
%        This mode refresh all necessary MAT files for new 
%        ADNI/bmp_ADNI_forDicom2BidsMapping.mat.
%
%        varargin{1} = DICOM directory
%        varargin{2} = BIDS directory
%
%
%     'prepare'
%
%
%     'checkback'
%
%
%
% SUPPORTED MODALITIES
% ====================================================================================
%
%   - T1w
%   - FLAIR
%   - asl
%
%
% HISTORY
% ====================================================================================
%
%   05 December 2022 - first version.
%
%   09 December 2022 - bmp_BIDSgenerator needs scalar input. Therfore, change
%                      DICOM2BIDS(i) to ADNI.DICOM2BIDS(i).
%
%
% KNOWN LIMITATIONS
% ====================================================================================
%
%  - Depending on VISCODE to identify multiply runs in the same session.
%
%  - Assumes max of 2 runs for each session.
%
%


	BMP_PATH = getenv ('BMP_PATH');



	% possible keywords in DICOM sequence name for each modality in ADNI
	possibleASLkeywords = 	{
							'ASL'
							'cerebral blood flow'
							'perfusion'
							};

	possibleT1keywords = 	{
							'MPRAGE'
							'T1'
							'IR-SPGR'
							'IR-FSPGR'
							'MP-RAGE'
							'MP RAGE'
							};

	possibleFLAIRkeywords = {
							'FLAIR'
							};



	switch operation_mode


		case 'initiate'

			bmp_procADNIstudyData;


		case {'create'; 'create_mapping'}

			if nargin == 2 && endsWith(varargin{1},'.mat')
				output = varargin{1};
			else
				output = fullfile (BMP_PATH, 'BIDS', 'bmp_ADNI.mat');
			end

			fprintf ('%s : Running in ''create'' mode. Will save DICOM2BIDS mapping to %s.\n',mfilename,output);

			fprintf ('%s : Loading bmp_ADNI.mat ... ', mfilename);

			ADNI_mat = load (fullfile (BMP_PATH, 'BIDS', 'bmp_ADNI.mat'));

			fprintf ('DONE!\n', mfilename);

			forDICOM2BIDS = ADNI_mat.forDICOM2BIDS;
			
			fprintf ('%s : Start to create DICOM2BIDS mapping.\n', mfilename);


			SUBJECT = strcat('ADNI',erase(forDICOM2BIDS.SID,'_'));
			SESSION = forDICOM2BIDS.VISCODE;
			DATATYPE = cell (size (forDICOM2BIDS,1),1);
			DATATYPE(:,1) = {'UNKNOWN'};
			MODALITY = cell (size (forDICOM2BIDS,1),1);
			MODALITY(:,1) = {'UNKNOWN'};
			RUN = ones (size (forDICOM2BIDS,1),1);
			ACQUISITION = cell (size (forDICOM2BIDS,1),1);
			ACQUISITION(:,1) = {'UNKNOWN'};
			SEQUENCE = forDICOM2BIDS.SEQUENCE;
			PATIENTID = forDICOM2BIDS.SID;
			STUDYDATE = strrep(cellstr(forDICOM2BIDS.SCANDATE),'-','');
			IMAGEUID = forDICOM2BIDS.IMAGEUID;
			DICOMSUBDIR = strrep(strrep(strrep(forDICOM2BIDS.SEQUENCE,' ','_'),'(','_'),')','_');

			MODALITY(find(contains(SEQUENCE,possibleT1keywords,		'IgnoreCase',true)),1) = {'T1w'};
			MODALITY(find(contains(SEQUENCE,possibleFLAIRkeywords,	'IgnoreCase',true)),1) = {'FLAIR'};
			MODALITY(find(contains(SEQUENCE,possibleASLkeywords,	'IgnoreCase',true)),1) = {'asl'};

			DATATYPE(find(strcmp(MODALITY,'T1w')),1) 	= {'anat'};
			DATATYPE(find(strcmp(MODALITY,'FLAIR')),1) 	= {'anat'};
			DATATYPE(find(strcmp(MODALITY,'asl')),1) 	= {'perf'};

			RUN(find(contains(SEQUENCE,{'repeat', 'repe', 'rpt','rep', 'repea'},'IgnoreCase',true)),1) = 2;

			for i = 1 : 9 												% support up to 9 runs
				forDICOM2BIDS_temp = table(	forDICOM2BIDS.SID,...
											forDICOM2BIDS.SCANDATE,...
											forDICOM2BIDS.VISCODE,...
											forDICOM2BIDS.SEQUENCE,...
											RUN);
				forDICOM2BIDS_temp.Properties.VariableNames = {'SID';'SCANDATE';'VISCODE';'SEQUENCE';'RUN'};
				[~, uniqIdx] = unique(forDICOM2BIDS_temp);
				RUN(setdiff(1:size(forDICOM2BIDS_temp,1), uniqIdx),1) = i+1;
			end


			%ACQUISITION



			DICOM2BIDS = table (SUBJECT,SESSION,DATATYPE,MODALITY,RUN,ACQUISITION,SEQUENCE,PATIENTID,STUDYDATE,IMAGEUID,DICOMSUBDIR);











			for i = 1 : size (forDICOM2BIDS,1)

				fprintf ('%s : Processing entry %d / %d in forDICOM2BIDS.\n', mfilename, i, size(forDICOM2BIDS,1));

				% +++++++++++++++++++++++++
				%            ASL
				% +++++++++++++++++++++++++

				if contains (forDICOM2BIDS.SEQUENCE{i}, possibleASLkeywords, 'IgnoreCase', true)

					forDICOM2BIDS (find (strcmp (forDICOM2BIDS.SID, forDICOM2BIDS.SID{i})

					RUN (find 

					% 	if any (strcmp (fieldnames (ADNI.DICOM2BIDS(i)), sid_data.VISCODE{j})) && ...
					% 			~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})), 'perf')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf), 'asl')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl), 'run01')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.run01) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.run01), 'DICOM')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.run01.DICOM) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.run01.DICOM), 'SeriesDescription')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.run01.DICOM.SeriesDescription)
					% 	   	run_idx = 'run02';
					%     else
					%     	run_idx = 'run01';
					% 	end

					% 	fprintf ('%s :  --> ASL found in bmp_ADNI_forDicom2BidsMapping.mat for %s (SEQUENCE = ''%s''; SCANDATE = ''%s''; VISCODE = ''%s''; IMAGEUID = ''%s''; run_idx = ''%s'').\n', mfilename, uniqueSID{i}, sid_data.SEQUENCE{j}, char(sid_data.SCANDATE(j)), sid_data.VISCODE{j}, sid_data.IMAGEUID{j}, run_idx);

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).DICOM.SeriesDescription 	= sid_data.SEQUENCE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).DICOM.PatientID         	= sid_data.SID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).DICOM.StudyDate  	 		= erase(char(sid_data.SCANDATE(j)),'-');
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).DICOM.IMAGEUID				= sid_data.IMAGEUID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).DICOM.subfoldername			= strrep(strrep(strrep(sid_data.SEQUENCE{j},' ','_'),'(','_'),')','_');

					% 	switch sid_data.SEQUENCE{j}

					% 		case 'Axial 3D PASL (Eyes Open)'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPasl';
					% 		case 'Axial 3D PASL (Eyes Open)    straight no angle'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPasl';
					% 		case 'Axial 3D PASL (Eyes Open) REPEAT'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPasl'; 	% this happened once for 036_S_6316
					% 																											% on 2019-08-13. However, we cannot
					% 																											% find another ASL on the same day
					% 																											% therefore, we are not assigning
					% 																											% 'run' entity although it said
					% 																											% 'REPEAT'.

					% 		case 'Ax 3D pCASL (Eyes Open)'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPcasl';
					% 		case 'Axial 3D pCASL'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPcasl';
					% 		case 'Axial 3D pCASL (Eyes Open)'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPcasl';
					% 		case 'Axial_3D_pCASL_Eyes_Open'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPcasl';
					% 		case 'WIP SOURCE - Axial 3D pCASL (Eyes Open)'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial3dPcasl';

					% 		case 'Axial 2D PASL'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';
					% 		case 'Axial 2D PASL (EYES OPEN)'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';
					% 		case 'Axial 2D PASL 0 angle L'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';
					% 		case 'Axial 2D PASL straight no ASL'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';
					% 	    case 'SOURCE - Axial 2D PASL'
					% 	    	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';
					% 		case 'WIP SOURCE - Axial 2D PASL'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'axial2dPasl';

					% 		case 'tgse_pcasl_PLD2000'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'pcaslPLD2000'

					% 		case 'Cerebral Blood Flow'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'cbf';

					% 		case 'Perfusion_Weighted'
					% 			ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.acquisition = 'perfusionWeighted';


					% 		%% NOTE THAT SOME 'SEQUENCE' OF 'MOCOSERIES' CORRESPOND TO ASL ACCORDING TO ASL QC FILES.
					% 		%% This has not been implemented.

					% 	end

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.subject     = ADNI.DICOM2BIDS(i).subject;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.session     = sid_data.VISCODE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.run 		 = run_idx;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).perf.asl.(run_idx).BIDS.modality    = 'asl';



					% % ++++++++++++++++++++++++++	
					% %            T1
					% % ++++++++++++++++++++++++++

					% elseif contains (sid_data.SEQUENCE{j}, possibleT1keywords, 'IgnoreCase', true)

					% 	if any (strcmp (fieldnames (ADNI.DICOM2BIDS(i)), sid_data.VISCODE{j})) && ...
					% 			~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})), 'anat')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat), 'T1w')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w), 'run01')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.run01) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.run01), 'DICOM')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.run01.DICOM) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.run01.DICOM), 'SeriesDescription')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.run01.DICOM.SeriesDescription)
					% 	   	run_idx = 'run02';
					%     else
					%     	run_idx = 'run01';
					% 	end

					% 	if contains (sid_data.SEQUENCE{j}, {'repeat', 'repe', 'rpt','rep', 'repea'}, 'IgnoreCase', true)		% if has keywords ~ 'repeat', force run_idx = '02'.
					% 		run_idx = 'run02';
					% 	end

					% 	fprintf ('%s :  --> T1w found in bmp_ADNI_forDicom2BidsMapping.mat for %s (SEQUENCE = ''%s''; SCANDATE = ''%s''; VISCODE = ''%s''; IMAGEUID = ''%s''; run_idx = ''%s'').\n', mfilename, uniqueSID{i}, sid_data.SEQUENCE{j}, char(sid_data.SCANDATE(j)), sid_data.VISCODE{j}, sid_data.IMAGEUID{j}, run_idx);

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).DICOM.SeriesDescription 	= sid_data.SEQUENCE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).DICOM.PatientID         	= sid_data.SID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).DICOM.StudyDate  	   		= erase(char(sid_data.SCANDATE(j)),'-');
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).DICOM.IMAGEUID				= sid_data.IMAGEUID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).DICOM.subfoldername			= strrep(strrep(strrep(sid_data.SEQUENCE{j},' ','_'),'(','_'),')','_');

					% 	T1w_acquisition_label = '';
					% 	if contains (sid_data.SEQUENCE{j}, {'SAG';'SAGITTAL'}, 'IgnoreCase', true)
					% 		T1w_acquisition_label = [T1w_acquisition_label 'sag'];
					% 	end
					% 	if contains (sid_data.SEQUENCE{j}, '3D', 'IgnoreCase', true)
					% 		T1w_acquisition_label = [T1w_acquisition_label '3d'];
					% 	end
					% 	if contains (sid_data.SEQUENCE{j}, 		{'MPRAGE', 'MP-RAGE', 'MP RAGE'}, 	'IgnoreCase', true) && (~ strcmp (sid_data.SEQUENCE{j}, 'IR-FSPGR (replaces MP-Rage)'))
					% 		T1w_acquisition_label = [T1w_acquisition_label 'Mprage'];
					% 	elseif contains (sid_data.SEQUENCE{j}, 	'IR-SPGR', 							'IgnoreCase', true)
					% 		T1w_acquisition_label = [T1w_acquisition_label 'Irspgr'];
					% 	elseif contains (sid_data.SEQUENCE{j}, 	'IR-FSPGR', 						'IgnoreCase', true)
					% 		T1w_acquisition_label = [T1w_acquisition_label 'Irfspgr'];
					% 	end

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).BIDS.subject     = ADNI.DICOM2BIDS(i).subject;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).BIDS.session     = sid_data.VISCODE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).BIDS.run 		 = run_idx;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).BIDS.acquisition = T1w_acquisition_label;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.T1w.(run_idx).BIDS.modality    = 'T1w';



					% % ++++++++++++++++++++++++++
					% %           FLAIR
					% % ++++++++++++++++++++++++++

					% elseif contains (sid_data.SEQUENCE{j}, possibleFLAIRkeywords, 'IgnoreCase', true) && ...
					% 		~ strcmp (sid_data.SEQUENCE{j}, 'Axial T2 Star-Repeated with exact copy of FLAIR')

					% 	if any (strcmp (fieldnames (ADNI.DICOM2BIDS(i)), sid_data.VISCODE{j})) && ...
					% 			~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j})), 'anat')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat), 'FLAIR')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR), 'run01')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.run01) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.run01), 'DICOM')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.run01.DICOM) && ...
					% 	   any (strcmp (fieldnames (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.run01.DICOM), 'SeriesDescription')) && ...
					% 	   		~ isempty (ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.run01.DICOM.SeriesDescription)
					% 	   	run_idx = 'run02';
					%     else
					%     	run_idx = 'run01';
					% 	end

					% 	if contains (sid_data.SEQUENCE{j}, {'repeat'; 'rpt'}, 'IgnoreCase', true)
					% 		run_idx = 'run02';
					% 	end

					% 	fprintf ('%s :  --> FLAIR found in bmp_ADNI_forDicom2BidsMapping.mat for %s (SEQUENCE = ''%s''; SCANDATE = ''%s''; VISCODE = ''%s''; IMAGEUID = ''%s''; run_idx = ''%s'').\n', mfilename, uniqueSID{i}, sid_data.SEQUENCE{j}, char(sid_data.SCANDATE(j)), sid_data.VISCODE{j}, sid_data.IMAGEUID{j}, run_idx);

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).DICOM.SeriesDescription 	= sid_data.SEQUENCE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).DICOM.PatientID         	= sid_data.SID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).DICOM.StudyDate  	    	= erase(char(sid_data.SCANDATE(j)),'-');
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).DICOM.IMAGEUID			= sid_data.IMAGEUID{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).DICOM.subfoldername		= strrep(strrep(strrep(sid_data.SEQUENCE{j},' ','_'),'(','_'),')','_');

					% 	FLAIR_acquisition_label = '';

					% 	if contains (sid_data.SEQUENCE{j}, {'AX';'AXIAL'}, 'IgnoreCase', true)
					% 		FLAIR_acquisition_label = [FLAIR_acquisition_label 'ax'];
					% 	elseif contains (sid_data.SEQUENCE{j}, 'Sagittal', 'IgnoreCase', true)
					% 		FLAIR_acquisition_label = [FLAIR_acquisition_label 'sag'];
					% 	end
					% 	if contains (sid_data.SEQUENCE{j}, '3D', 'IgnoreCase', true)
					% 		FLAIR_acquisition_label = [FLAIR_acquisition_label '3d'];
					% 	end

					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).BIDS.subject     = ADNI.DICOM2BIDS(i).subject;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).BIDS.session     = sid_data.VISCODE{j};
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).BIDS.run 		   = run_idx;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).BIDS.acquisition = FLAIR_acquisition_label;
					% 	ADNI.DICOM2BIDS(i).(sid_data.VISCODE{j}).anat.FLAIR.(run_idx).BIDS.modality    = 'FLAIR';

				% 	end

				% end

			end


			% fprintf ('%s : ADNI DICOM2BIDS mapping has been created.\n', mfilename);

			% fprintf ('%s : Saving ADNI DICOM2BIDS to %s ... ', mfilename, output);

			% save (output, 'ADNI');

			% fprintf ('DONE!\n');

			% varargout{1} = ADNI;


		case {'retrieve'; 'retrieve_mapping'}

			if nargin == 2 && isfile (varargin{1}) && endsWith(varargin{1},'.mat')
				predefined_mapping = varargin{1};
			else
				predefined_mapping = fullfile (BMP_PATH, 'BIDS', 'bmp_ADNI_DICOM2BIDS.mat');
			end

			fprintf ('%s : Running in ''retrieve'' mode. Will retrieve DICOM2BIDS mapping from %s.\n',mfilename,predefined_mapping);

			fprintf ('%s : Loading %s ... ', mfilename, predefined_mapping);

			ADNI = load(predefined_mapping).ADNI;

			fprintf ('DONE!\n');

			varargout{1} = ADNI;


		case {'dcm2niix'; 'run_dcm2niix'}

			if nargin == 2 && isfile (varargin{1}) && endsWith(varargin{1},'.mat')
				dcm2niixcmdmat = varargin{1};
			else
				dcm2niixcmdmat = fullfile (BMP_PATH, 'BIDS', 'bmp_ADNI_dcm2niix.mat');
			end

			dcm2niix = load(dcm2niixcmdmat).dcm2niix;
			

			for i = 1 : size(dcm2niix.cmd,1)

				if ~ isfolder (dcm2niix.BIDSoutputdir{i,1})

					status = mkdir (dcm2niix.BIDSoutputdir{i,1});

					if ~ status

						dcm2niix.BIDSmkdirStatus{i,1} = 'failed creating BIDS folder';

						fprintf(2, '%s : Creating BIDS directory ''%s'' failed. This may be because you don''t have the directory structure specified in bmp_ADNI_dcm2niixcmd.mat. You may need to run bmp_BIDSgenerator with proper BIDS_directory argument.\n', mfilename, dcm2niix.BIDSoutputdir{i,1});

						continue

					else

						dcm2niix.BIDSmkdirStatus{i,1} = 'BIDS folder created successfully';

					end

				else

					dcm2niix.BIDSmkdirStatus{i,1} = 'BIDS folder already exists';

				end

				fprintf ('%s : (%d / %d) : Running dcm2niix to convert ''%s'' to ''%s''.nii ...', mfilename, i, size (dcm2niix.DICOMinputdir,1), dcm2niix.DICOMinputdir{i,1}, fullfile(dcm2niix.BIDSoutputdir{i,1}, dcm2niix.BIDSniibasename{i,1}));

				[dcm2niix.cmdstatus{i,1}, dcm2niix.cmdout{i,1}] = system (dcm2niix.cmd{i,1});

				if contains (dcm2niix.cmdout{i,1}, 'warning', 'IgnoreCase', true)

					dcm2niix.warnings{i,1} = true;

				else

					dcm2niix.warnings{i,1} = false;

				end

				fprintf (' DONE!\n');

			end

			fprintf('%s : Saving dcm2niix commands and command outputs to bmp_ADNI_dcm2niix.mat.\n', mfilename);

			save (dcm2niixcmdmat, 'dcm2niix');

			varargout{1} = dcm2niix;


		case {'refresh'; 'refresh_mat_files'} % refresh mode is for internal testing.

			ADNI = bmp_ADNI ('create'); % create DICOM2BIDS

			[~] = bmp_BIDSgenerator ('ADNI', ADNI, varargin{1}, varargin{2});

			%% not running dcm2niix in refresh mode.


		case {'prepare'} % prepare for real run

			ADNI = bmp_ADNI ('retrieve');

			[~] = bmp_BIDSgenerator ('ADNI', ADNI, varargin{1}, varargin{2}, 'MatOutDir', fullfile (varargin{2}, 'code', 'BMP'));


		case {'checkback'} 	% using info from MRI scans (e.g., ???_S_???? IDs) and comparing with info
							% in MRI_master table in bmp_ADNI.mat, in order to try to savage some of
							% the scans.

	end

end
	
