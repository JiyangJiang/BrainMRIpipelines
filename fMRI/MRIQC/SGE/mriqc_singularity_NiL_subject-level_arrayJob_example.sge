#!/bin/bash

#$ -N mriqc
#$ -V
#$ -cwd
#$ -pe smp 4
#$ -q bigmem.q
#$ -l h_vmem=16G
#$ -o /data2/jiyang/backup_data/SCS+MW24_allFMRI_and_corresponding_T1DWI_BIDS/derivatives/mriqc/sge.out
#$ -e /data2/jiyang/backup_data/SCS+MW24_allFMRI_and_corresponding_T1DWI_BIDS/derivatives/mriqc/sge.err
#$ -t 1-362

# PREPARATION
# =======================================================================================
#
# 1) mkdir -p ${BIDS_project_folder}/derivatives/mriqc/work
#
# 2) change -o/-e path
#
# 3) change -t (number of subjects)
#
# 4) change ${BIDS_project_folder}
#
# 5) !! copy simg to a place where BIDS data are accessible from within container. This
#       is usually parent folder, and run singularity from the same parent folder, or
#       its child folder. use 'singularity shell /path/to/mriqc.simg'
#
# =======================================================================================

BIDS_project_folder=/data2/jiyang/backup_data/SCS+MW24_allFMRI_and_corresponding_T1DWI_BIDS
ver=v0.15.2

module load singularity/singularity

# singularity by default exposes all environment variables from host inside the container.
# because of this your host libraries (e.g. nipype) could be accidentally used instead of
# the ones inside the container - if they are included in PYTHONPATH. To avoid such situation
# recommend using --cleanenv singularity flag in production use.
#
# depending on how Singularity is configured on your cluster, it might or might not automatically
# bind (mount or expose) host folders to the container. If this is not done automatically, you will
# need to bind the necessary folders using -B <host_folder>:<container_folder>.

subjID=$(basename $(ls -1d ${BIDS_project_folder}/sub-* | awk "NR==${SGE_TASK_ID}"))
subjID=`echo ${subjID} | awk -F '-' '{print $2}'`



# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
# a few things to note when calling MRIQC in Singularity - STUPID !!! Took me
# a lot of time to figure out !!!
# +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
#
# 1) Use "singularity shell *.simg" to start shell within container, and see
#    if the data are accessible from within container.
#
#    in my case do the following can access all files in 
#    /data2/jiyang/test:
#		a) put the simg to /data2/jiyang 
#		b) cd /data2/jiyang
#		c) singularity shell *.simg
#
#
# 2) pass subject ID WITHOUT 'sub-' to --participant_label option
#
# 3) have to use the binding option (-B or --bind)


singularity run --cleanenv \
				-B ${BIDS_project_folder}:/data \
				-B ${BIDS_project_folder}/derivatives/mriqc/${ver}:/out \
				-B ${BIDS_project_folder}/derivatives/mriqc/${ver}/work:/work \
				/data2/jiyang/mriqc-v0.15.0.simg \
				/data /out participant \
				--work-dir /work \
				--participant_label ${subjID} \
				--n_cpus 4 \
				--mem_gb 16 \
				--ica \
				--ants-nthreads 4
				