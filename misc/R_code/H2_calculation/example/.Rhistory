require(OpenMx)
require(psych)
# source("GenEpiHelperFunctions.R")
### Data import
twindata<-read.delim("Test Data ACE Model.csv", header = TRUE, sep = ";")
# zyg as factor
twindata$zyg<- factor(twindata$zyg, levels= c(1:2),labels= c("MZ", "DZ"))
twindata
nv <- 1			# number of variables for a twin = 1 in Univariate
ntv <- 2*nv		# number of variables for a pair = 2* 1 for Univariate
#twindata <- read.table ('ADHDiq.csv', header=T, sep=',')
names (twindata)
#selVars <- c('IQ1','IQ2')
mzData <- subset(twindata, zyg=="MZ", selVars)
dzData <- subset(twindata, zyg=="DZ", selVars)
# Print Descriptive Statistics
# -----------------------------------------------------------------------
describe(twindata)
colMeans(mzData,na.rm=TRUE)
cov(mzData,use="complete")
colMeans(dzData,na.rm=TRUE)
cov(dzData,use="complete")
mzData
#selVars <- c('IQ1','IQ2')
mzData <- subset(twindata, zyg=="MZ", selVars)
dzData <- subset(twindata, zyg=="DZ", selVars)
twindata
help subset()
ls
twindata
mzData = subset (twindata, zyg == "MZ", selVars)
mzData = subset (twindata, zyg == "MZ")
mzVars
mzData
selVars = c("duration1", "duration2")
mzData <- subset(twindata, zyg=="MZ", selVars)
dzData <- subset(twindata, zyg=="DZ", selVars)
mzData
describe(twindata)
colMeans(mzData,na.rm=TRUE)
cov(mzData,use="complete")
colMeans(dzData,na.rm=TRUE)
cov(dzData,use="complete")
univTwinSatModel <- mxModel("univTwinSat",
mxModel("MZ",
mxMatrix( type="Lower", nrow=ntv, ncol=ntv, free=TRUE, values=10, name="CholMZ" ),
mxAlgebra( expression=CholMZ %*% t(CholMZ), name="expCovMZ" ),
mxMatrix( type="Full", nrow=1, ncol=ntv, free=TRUE, values=90, name="expMeanMZ" ),
mxData( observed=mzData, type="raw" ),
mxFIMLObjective( covariance="expCovMZ", means="expMeanMZ", dimnames=selVars),
# Algebra's needed for equality constraints
mxAlgebra( expression=expMeanMZ[1,1:nv], name="expMeanMZt1"),
mxAlgebra( expression=expMeanMZ[1,(nv+1):ntv], name="expMeanMZt2"),
mxAlgebra( expression=t(diag2vec(expCovMZ)), name="expVarMZ"),
mxAlgebra( expression=expVarMZ[1,1:nv], name="expVarMZt1"),
mxAlgebra( expression=expVarMZ[1,(nv+1):ntv], name="expVarMZt2")
),
mxModel("DZ",
mxMatrix( type="Lower", nrow=ntv, ncol=ntv, free=TRUE, values=10, name="CholDZ" ),
mxAlgebra( expression=CholDZ %*% t(CholDZ), name="expCovDZ" ),
mxMatrix( type="Full", nrow=1, ncol=ntv, free=T, values=90, name="expMeanDZ" ),
mxData( observed=dzData, type="raw" ),
mxFIMLObjective( covariance="expCovDZ", means="expMeanDZ", dimnames=selVars),
# Algebra's needed for equality constraints
mxAlgebra( expression=expMeanDZ[1,1:nv], name="expMeanDZt1"),
mxAlgebra( expression=expMeanDZ[1,(nv+1):ntv], name="expMeanDZt2"),
mxAlgebra( expression=t(diag2vec(expCovDZ)), name="expVarDZ"),
mxAlgebra( expression=expVarDZ[1,1:nv], name="expVarDZt1"),
mxAlgebra( expression=expVarDZ[1,(nv+1):ntv], name="expVarDZt2")
),
mxAlgebra( MZ.objective + DZ.objective, name="min2sumll" ),
mxAlgebraObjective("min2sumll")
)
univTwinSatFit <- mxRun(univTwinSatModel)
univTwinSatSumm <- summary(univTwinSatFit)
univTwinSatSumm
parameterSpecifications(univTwinSatFit)
expectedMeansCovariances(univTwinSatFit)
tableFitStatistics(univTwinSatFit)
univACEModel <- mxModel("univACE",
mxModel("ACE",
# Matrices a, c, and e to store a, c, and e path coefficients
mxMatrix( type="Lower", nrow=nv, ncol=nv, free=TRUE, values=10, label="a11", name="a" ),
mxMatrix( type="Lower", nrow=nv, ncol=nv, free=TRUE, values=10, label="c11", name="c" ),
mxMatrix( type="Lower", nrow=nv, ncol=nv, free=TRUE, values=10, label="e11", name="e" ),
# Matrices A, C, and E compute variance components
mxAlgebra( expression=a %*% t(a), name="A" ),
mxAlgebra( expression=c %*% t(c), name="C" ),
mxAlgebra( expression=e %*% t(e), name="E" ),
# Algebra to compute total variances and standard deviations (diagonal only)
mxAlgebra( expression=A+C+E, name="V" ),
mxMatrix( type="Iden", nrow=nv, ncol=nv, name="I"),
mxAlgebra( expression=solve(sqrt(I*V)), name="iSD"),
# Algebra to compute standardized path estimares and variance components
mxAlgebra( expression=a%*%iSD, name="sta"),
mxAlgebra( expression=c%*%iSD, name="stc"),
mxAlgebra( expression=e%*%iSD, name="ste"),
mxAlgebra( expression=A/V, name="h2"),
mxAlgebra( expression=C/V, name="c2"),
mxAlgebra( expression=E/V, name="e2"),
# Note that the rest of the mxModel statements do not change for bivariate/multivariate case
# Matrix & Algebra for expected means vector
mxMatrix( type="Full", nrow=1, ncol=nv, free=TRUE, values= 90, label="mean", name="Mean" ),
mxAlgebra( expression= cbind(Mean,Mean), name="expMean"),
# Algebra for expected variance/covariance matrix in MZ
mxAlgebra( expression= rbind  ( cbind(A+C+E , A+C),
cbind(A+C   , A+C+E)), name="expCovMZ" ),
# Algebra for expected variance/covariance matrix in DZ
mxAlgebra( expression= rbind  ( cbind(A+C+E     , 0.5%x%A+C),
cbind(0.5%x%A+C , A+C+E)),  name="expCovDZ" )
),
mxModel("MZ",
mxData( observed=mzData, type="raw" ),
mxFIMLObjective( covariance="ACE.expCovMZ", means="ACE.expMean", dimnames=selVars )
),
mxModel("DZ",
mxData( observed=dzData, type="raw" ),
mxFIMLObjective( covariance="ACE.expCovDZ", means="ACE.expMean", dimnames=selVars )
),
mxAlgebra( expression=MZ.objective + DZ.objective, name="m2ACEsumll" ),
mxAlgebraObjective("m2ACEsumll"),
mxCI(c('ACE.a', 'ACE.c', 'ACE.e','ACE.A', 'ACE.C', 'ACE.E','ACE.h2', 'ACE.c2', 'ACE.e2'))
)
univACEFit <- mxRun(univACEModel, intervals=T)
univACESumm <- summary(univACEFit)
univACESumm
univACEFit$ACE.h2
univACEFit$ACE.c2
univACEFit$ACE.e2
univACEFit$ACE.sta
univACEFit$ACE.stc
univACEFit$ACE.ste
